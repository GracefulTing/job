<div id="statements_left_search">
	<img src={% static "images/contentFilter/search.png" %} alt="搜索">
</div>
statements.html : 与搜索图标父级同级
<!-- 搜索功能 -->
<div class="view_search clear">
	<div class="view_search_img">
		<img src={% static "dashboard/img/search.png" %} alt="search">
	</div>
	<input type="text" placeholder="请输入查询的字段" class="view_search_input">
</div>

statements.css : 最后
<!-- 搜索 -->
#pageStatementsModule #statements_left_bar .view_search{width: 173px;height: 21px;border: 1px solid #DEDEDE;border-radius: 11.5px;line-height: 21px;position: relative;left:12.5px;display: none;}
#pageStatementsModule #statements_left_bar .view_search .view_search_img{width: 23px;height: 23px;vertical-align: middle;box-sizing: border-box;line-height: 23px;border-right: none;border-top-left-radius: 11.5px;border-bottom-left-radius: 11.5px;}
#pageStatementsModule #statements_left_bar .view_search .view_search_img img{width: 12px;height: 11px;float: left;margin: 6px 0px 0px 6px;cursor: pointer;}
#pageStatementsModule #statements_left_bar .view_search .view_search_input{position:absolute;height: 22px;top: 0;left: 23px;width:150px;border-top-right-radius: 11.5px;border-bottom-right-radius: 11.5px;}

statements.js :241
function mdHandleFun(){
		//搜索功能
			$("#pageStatementsModule #statements_left_bar #state_left_bar_title #statements_left_search").click(function(event){
				event.stopPropagation();
				if($(this).parents("#statements_left_bar").find(".view_search").css("display") == "block"){
					$(this).parents("#statements_left_bar").find(".view_search").hide(300);

					$(this).parents("#statements_left_bar").find(".viewTableShow").animate({
						"height":$(this).parents("#statements_left_bar").height() - 32 + "px",
					},300);

				}else{
					$(this).parents("#statements_left_bar").find(".view_search_input").focus();
					$(this).parents("#statements_left_bar").find(".view_search").show(300);
					$(this).parents("#statements_left_bar").find(".viewTableShow").stop(true).animate({
						"height":$(this).parents("#statements_left_bar").height() - 22 - 32 + "px",
					},300);
				}
			})
			Search($("#pageStatementsModule #statements_left_bar .view_search .view_search_input"),"view_show_name_save",$("#pageStatementsModule #statements_left_bar #statements_left_bar_area"));
		}
		mdHandleFun();

		function Search(ele,activeClass,showContent){
			$("#pageStatementsModule #statements_left_bar .view_search .view_search_input").val('');
		    //报表弹窗筛选功能
		  $(ele).on("input",function(){
		    //搜索里输入的值
		    var search_input_data  = $(ele).val();

		    if(search_input_data != ""){
      			$(showContent).children().css("display","none");

		      	var reg_str = "/"+search_input_data+"/gi";

		      	var list_p=$(showContent).find("."+activeClass+"");

			    for(var i = 0 ; i < list_p.length;i++){

			    	var reg = eval(reg_str);

			      (function(index){
			        var list_li_text = list_p.eq(index).text();
			        if(reg.test(list_li_text) == true){
			          	list_p.eq(index).parent().parent().css("display","block");
			        }
			      })(i);

			    }
		    }else{
      			$(showContent).children().css("display","block");
		    }
		  })
		}


<!-- 表标题的增加 修改 -->
<div class="tableView_name">
	<h4>添加表标题</h4>
</div>
//表标题的修改
$("#view_show_area #view_show_area_content .tableView_name").dblclick(function(){
	//记录之前的名称
	var saveBefore = $(this).find("h4").text();

	if(saveBefore != "添加表标题"){
		$(this).html("").append($("<input type='text' class='viewName_input' placeholder='添加表标题'>"));
		$("#view_show_area #view_show_area_content .tableView_name .viewName_input").val(saveBefore);
	}else{
		$(this).html("").append($("<input type='text' class='viewName_input' placeholder="+saveBefore+">"));
	}

})

//点击区域外保存表标题
$(document).click(function(ev){
	if($(".viewName_input").length > 0 && !$(ev.target).is($("#view_show_area #view_show_area_content .tableView_name")) && !$(ev.target).is($("#view_show_area #view_show_area_content .tableView_name input")) && !$(ev.target).is($("#view_show_area #view_show_area_content .tableView_name p"))){
		if($("#view_show_area #view_show_area_content .tableView_name input").val() != ""){
			//记录输入框的值
			var saveView_input = $("#view_show_area #view_show_area_content .tableView_name input").val();
			$("#view_show_area #view_show_area_content .tableView_name").css("color","#000");
		}else{
			var saveView_input = "添加表标题";
			$("#view_show_area #view_show_area_content .tableView_name").css("color","#B4B4B4");
		}
		$("#view_show_area #view_show_area_content .tableView_name").html("").append($("<h4>"+saveView_input+"</h4>"));
	}
})



label换行：aY
interval: 0,//标签设置为全部显示
formatter:function(params){
	//粘贴以下function内未注释的代码
	    var newParamsName = "";// 最终拼接成的字符串
	    var paramsNameNumber = params.length;// 实际标签的个数
	    var provideNumber = 4;// 每行能显示的字的个数
	    var rowNumber = Math.ceil(paramsNameNumber / provideNumber);// 换行的话，需要显示几行，向上取整
	    /**
	     * 判断标签的个数是否大于规定的个数， 如果大于，则进行换行处理 如果不大于，即等于或小于，就返回原标签
	     */
	    // 条件等同于rowNumber>1
	    if (paramsNameNumber > provideNumber) {
	        /** 循环每一行,p表示行 */
	        for (var p = 0; p < rowNumber; p++) {
	            var tempStr = "";// 表示每一次截取的字符串
	            var start = p * provideNumber;// 开始截取的位置
	            var end = start + provideNumber;// 结束截取的位置
	            // 此处特殊处理最后一行的索引值
	            if (p == rowNumber - 1) {
	                // 最后一次不换行
	                tempStr = params.substring(start, paramsNameNumber);
	            } else {
	                // 每一次拼接字符串并换行
	                tempStr = params.substring(start, end) + "\n";
	            }
	            newParamsName += tempStr;// 最终拼成的字符串
	        }

	    } else {
	        // 将旧标签的值赋给新标签
	        newParamsName = params;
	    }
	    //将最终的字符串返回
	    return newParamsName
}


chartHandle.js : 2364:
// interval:function(index,value){
// 	if(all_dimensionality[dimensionality_show_data.length - 1] != "state"){
// 		return !/YZYPD/.test(value);
// 	}else{
// 		//return value;
// 		if(/^YZYPD/.test(value)){
// 			// return value.split("YZYPD")[1];
// 			return value.replace("YZYPD","");
// 		}else{
// 			return value;
// 		}
// 	}
// },


条形图分组问题：
三维及多维：
String [][] a = {{"亚洲"，"非洲","美洲"},{"中国"，"利比亚"，"美国"},{"上海","不清楚","洛杉矶"}};
String [][] b = new String[a[0].length][a.length];
for(int i=0;i<a.length;i++){
	for(int j=0;j<a[i].length;j++){
		b[j][i] = a[i][j];
	}
}
for(int i=0;i<b.length;i++){
	for(j=0;j<b[i].length;j++){
		system.out.println(b[i][j] + "-");
	}
	system.out.println("\t");
}


二维：
String [][] a = {{"a","b"},{"a2","b3"}};
for(int i=0;i<a.length - 1;i++){
	for(int j=0;j<a[i].length;j++){
		System.out.println(a[i][j]+"-"+a[i+1][j]);
	}
}


关系图：
// function qc(arr){
//  	var res = [arr[0]];
//  	for(var i = 1; i < arr.length; i++){
//   		var repeat = false;
//   		for(var j = 0; j < res.length; j++){
//    			if(arr[i] == res[j]){
//     			repeat = true;
//     			break;
//    			}
//   		}
//   		if(!repeat){
//    			res.push(arr[i]);
//   		}
//  	}
//  	return res;
// }
// // console.log(arr);
// tempArr = qc(arr);
// console.log(tempArr);
// for(var t=0;t<tempArr.length;t++){
// 	str = tempArr[t];
// 	var aNode = {
// 		"value":aData[drag_measureCalculateStyle_arr[storeNum_toview][all_measure[0]]]/allValueUnitDict[valueUnitValue_arr[storeNum_toview]],
// 		"originValue":aData[drag_measureCalculateStyle_arr[storeNum_toview][all_measure[0]]],
// 		// "name":name,
// 		"name":str,
// 		"fixed":false,
// 		"draggable":true,
// 		"category":categorys.hasObject("name",aData[need_dimensionality[0]]),
// 		// "dirllInfo":{"currentField":last_dimensionaity,"currentValue":aData[last_dimensionaity]},
// 		"dirllInfo":{"currentField":all_dimensionality[index],"currentValue":aData[all_dimensionality[index]]},
// 		"tongbi":aData["同比"+drag_measureCalculateStyle_arr[storeNum_toview][all_measure[0]]],
// 		"huanbi":aData["环比"+drag_measureCalculateStyle_arr[storeNum_toview][all_measure[0]]],
// 		"viewtype":"relational",
// 		label:{
// 			normal:
// 			{
// 				// show:false,
// 				show:need_dimensionality.length < 25,
// 				formatter:function(params){
// 					// console.log(params);
// 					var names = params["name"].split("_YZYPD_");
// 					var needValue = params.value;
// 					  if(normalUnitValue_arr[storeNum_toview] != -1){
// 	  	 				needValue = needValue.toFixed(normalUnitValue_arr[storeNum_toview]);
// 					  }
// 					return names[names.length - 2]+":"+needValue;
// 				}
// 			}
// 		}
// 	}
// 	console.log(aNode)
// 	need_all_nodes.push(aNode);
// }


var s = new Set();
s.add(name);
console.log(s);
// console.log(s.size);
s.forEach(function (element, sameElement, s) {
	str = element;
	// console.log(element);
});


// str += aData[need_dimensionality[0]] + "_YZYPD_";
// for(var a=1;a<arr.length;a++){
// 	if(str != arr[a]){
// 		str = arr[a];
// 	}
// }


// if(arr[arr.length-1] != name){
// 	arr.push(name);
// 	// console.log(arr);
// 	for(var l=0;l<arr.length;l++){
// 		str = arr[l];
// 	}
// 	// console.log(str);
// }


// if(arr[arr.length-1] != name){
// 	arr.push(name);
// 	// console.log(arr);
// 	for(var l=0;l<arr.length;l++){
// 		if(tempArr.indexOf(arr[l]) == -1){
// 			tempArr.push(arr[l]);
// 		}else{
// 			arr[l] = "";
// 			tempArr.push(arr[l]);
// 		}
// 		for(var t=0;t<tempArr.length;t++){
// 			str = tempArr[t];
// 		}									
// 	}
// 	// console.log(str);
// }


// console.log(arr);
// arr.sort();
// for(var l=0;l<arr.length;l++){
// 	if(arr[l] == arr[l+1]){
// 		arr.splice(l,1,"repeat");
// 	}
// }
// console.log(arr);

条形图分组：
3028:
// for(var a=0;a<series[0].data.length;a++){
// 	var dataArr = series[0].data[a].theDimeInfo;
// 	// console.log(dataArr);
// 	var last = tempArr[tempArr.length-1];
// 	if(/^YZYPD/.test(last)){
// 		last = last.split("YZYPD")[1];
// 	}
// 	if(last != dataArr[0]){
// 		tempArr.push(dataArr[0]);
// 	}else{
// 		tempArr.push("YZYPD" + dataArr[0]);
// 	}
// 	// console.log(tempArr);
// 	var s = "";
// 	for(var d=0;d<dataArr.length;d++){
// 		s += dataArr[d] + "-";
// 		var sVal = s.substring(0,s.length-1);
// 	}
// 	// console.log(sVal);
// 	var prev = sVal.split("-")[0];
// 	for(var t=0;t<tempArr.length;t++){
// 		prev = tempArr[t];
// 	}
// 	// console.log(prev);
// 	var rs = prev + "-" + sVal.split("-")[1];
// 	// console.log(rs);

// 	// var valueArr = rs.split("-");
// 	// dataArr = valueArr;
// 	// // console.log(dataArr);
// 	// for(var v=0;v<dataArr.length;v++){
// 	// 	if(/^YZYPD/.test(dataArr[v])){
// 	// 		aY["axisTick"].length = 0;
// 	// 	}else{
// 	// 		aY["axisTick"].length = 80 * v + i;
// 	// 	}
// 	// }

// 	var ss = "YZYPD";
// 	var index = rs.indexOf(ss);
// 	// console.log(index);
// 	if(index == -1){
// 		aY["axisTick"].length = 160;
// 		console.log(aY["axisTick"].length);
// 	}else{
// 		aY["axisTick"].length = 0;
// 		console.log(aY["axisTick"].length);
// 	}

// 	// if(/^YZYPD/.test(prev) && !/YZYPD/.test(sVal.split("-")[1])){
// 	// 	aY["axisTick"].length = 0;
// 	// }else{
// 	// 	aY["axisTick"].length = 160 + i;
// 	// }
	
// }

2965:
// var s = "";
// var ss = "";
// var saveArr = [];
// for(j=0;j<dimensionality_show_data.length-1;j++){
// 	for(var k=0;k<dimensionality_show_data[j].length;k++){
// 		s = dimensionality_show_data[j][k] + "-" + dimensionality_show_data[j+1][k];
// 		// console.log(dimensionality_show_data[j][k] + "-" + dimensionality_show_data[j+1][k]);
// 		// console.log(s);	
// 		saveArr.push(s);
// 	}
// }
// //console.log(saveArr);
// for(var s=0;s<saveArr.length;s++){
// 	ss = saveArr[s];
// 	console.log(ss);
// 	var tar = "YZYPD";
// 	var index = ss.indexOf(tar);
// 	if(index == -1){
// 		aY["axisTick"].length = 160;
// 	}else{
// 		aY["axisTick"].length = 0;
// 	}
// }

条形图刻度最大长度:2631
// var arr = [];
// for(var j = 0;j < dimensionality_show_data[i].length; j ++){
// 	// arr.push(dimensionality_show_data[i][j].length);
// 	var dataLen = dimensionality_show_data[i][j];
// 	if(dataLen){
// 		if(/YZYPD/.test(dataLen)){
// 			dataLen = dataLen.split("YZYPD")[1];
// 		}
// 		arr.push(dataLen.length);
// 	}
// }
// var maxLength = Math.max.apply(null, arr);

条形图之前：
// // 条形图
	// function barChart_generate_fun(){
	// 	measure_Hanlde(all_dimensionality,all_measure,null,function(data){
	// 		var series = [];
	// 		var dimensionality_show_data = [];
	// 		var needYais = [];
	// 		var needXais = [
	// 			{
	// 		   	 	show:true,
	// 		        type: "value",
	// 				gridIndex:all_dimensionality.length-1 < 0 ? 0 : all_dimensionality.length-1,
	// 				// name: commonLegend.join("\n"),
	// 		        nameLocation:"end",
	// 		        nameGap:10,
	// 		        // offset:maxLength * 5,
	// 		    }
	// 		];
	// 		var gridArr = [];
	// 		var valueMax = 0;

	// 		for(var i = 0;i < data.length;i++){
	// 			var aData = data[i];
	// 			var theDimeInfo = [];
	// 			var theDimeData = [];
	// 			for(var k = 0;k < all_dimensionality.length;k++){
	// 				theDimeInfo.push(aData[all_dimensionality[k]]);
	// 				// console.log(typeof(String(aData[all_dimensionality[k]])),String(aData[all_dimensionality[k]]))

	// 			}
	// 			for(var j = 0;j < all_measure.length;j++){ // 计算出series
	// 				if(valueMax < aData[drag_measureCalculateStyle[all_measure[j]]]){
	// 					valueMax = aData[drag_measureCalculateStyle[all_measure[j]]];
	// 				}
	// 				if(!series[j]){
	// 					series[j] = {
	// 						"name":drag_measureCalculateStyle[all_measure[j]],
	// 						"type":"bar",
	// 						"yAxisIndex":all_dimensionality.length-1 < 0 ? 0 : all_dimensionality.length-1,
	// 						"xAxisIndex":all_dimensionality.length-1 < 0 ? 0 : all_dimensionality.length-1,
	// 						"data":[{"value":aData[drag_measureCalculateStyle[all_measure[j]]]/allValueUnitDict[valueUnitValue],"originValue":aData[drag_measureCalculateStyle[all_measure[j]]],"theDimeInfo":theDimeInfo,"dirllInfo":{"currentField":last_dimensionaity,"currentValue":aData[last_dimensionaity]},"tongbi":aData["同比"+drag_measureCalculateStyle[all_measure[j]]],"huanbi":aData["环比"+drag_measureCalculateStyle[all_measure[j]]],"measureName":all_measure[j]}],
	// 						z:3,
	// 						label:{
	// 							normal:{
	// 								show:dimensionality_show_data.length < 25 && all_measure.length < 3,
	// 								position:"right",
	// 								formatter:function(params){
	// 			                    		if(normalUnitValue != -1){
	// 			                    			return params.value.toFixed(normalUnitValue);
	// 			                    		}else{
	// 			                    			// console.log(params.name);
	// 			                    			// console.log(params.value);
	// 			                    			return params.value;
	// 			                    		}
				   

	// 		                  		 },
	// 							}
	// 						},
	// 					};
	// 				}else{
	// 					series[j]["data"].push({"value":aData[drag_measureCalculateStyle[all_measure[j]]]/allValueUnitDict[valueUnitValue],"originValue":aData[drag_measureCalculateStyle[all_measure[j]]],"theDimeInfo":theDimeInfo,"dirllInfo":{"currentField":last_dimensionaity,"currentValue":aData[last_dimensionaity]},"tongbi":aData["同比"+drag_measureCalculateStyle[all_measure[j]]],
	// 					"huanbi":aData["环比"+drag_measureCalculateStyle[all_measure[j]]],"measureName":all_measure[j]});
	// 				}
	// 			}

	// 			var dimension_length =  all_dimensionality.length <= 0 ? 1 : all_dimensionality.length;
	// 			for(var k = 0;k < dimension_length;k++){
	// 				if(!dimensionality_show_data[k]){				
	// 					dimensionality_show_data[k] = [aData[all_dimensionality[k]]];
	// 				}else{
	// 					//dimensionality_show_data[k].push(aData[all_dimensionality[k]]);
	// 					var index = dimensionality_show_data[k].indexOf(aData[all_dimensionality[k]]);
	// 					if(index == -1){
	// 						dimensionality_show_data[k].push(aData[all_dimensionality[k]]);
	// 					}else if(index != -1){
	// 						if(all_dimensionality[dimensionality_show_data.length - 1] != all_dimensionality[k]){
	// 							var lastVal = dimensionality_show_data[k][dimensionality_show_data[k].length-1];
	// 							if(/YZYPD/.test(lastVal)){
	// 								lastVal = lastVal.split("YZYPD")[1];
	// 							}
	// 							if(lastVal == aData[all_dimensionality[k]]){
	// 							// if(dimensionality_show_data[k][dimensionality_show_data[k].length-1] == aData[all_dimensionality[k]]){
	// 								dimensionality_show_data[k].push("YZYPD"+ aData[all_dimensionality[k]]);
	// 							}else{
	// 								dimensionality_show_data[k].push(aData[all_dimensionality[k]]);
	// 							}
	// 						}else{
	// 							dimensionality_show_data[k].push(aData[all_dimensionality[k]]);
	// 						}
	// 					}

	// 				}
	// 			}
	// 		}



	// 		for(var i = 0;i < dimensionality_show_data.length;i++){
	// 			//var arr = [];
	// 			// for(var j = 0;j < dimensionality_show_data[i].length; j ++){
	// 			// 	// arr.push(dimensionality_show_data[i][j].length);
	// 			// 	var dataLen = dimensionality_show_data[i][j];
	// 			// 	if(dataLen){
	// 			// 		if(/YZYPD/.test(dataLen)){
	// 			// 			dataLen = dataLen.split("YZYPD")[1];
	// 			// 		}
	// 			// 		//arr.push(dataLen.length);
	// 			// 	}
	// 			// 	console.log(dataLen,dataLen.length);
	// 			// }
	// 			//var maxLength = Math.max.apply(null, arr);

				
	// 			var aY = {
	// 				"show":true,
	// 				"name":all_dimensionality[i],
	// 				"nameGap":10,
	// 				"nameRotate":15,
	// 				"nameLocation":"end",
	// 				"type":"category",
	// 				// "position":"left",
	// 				// "offset":maxLength,
	// 				//"boundaryGap": ['20%', '20%'],

	// 				axisTick:{
	// 					inside:false,
	// 					interval:function(index,value){return !/^YZYPD/.test(value)}
	// 				},
	// 				axisLabel:{
	// 					color:"black",
	// 					rotate:15,
	// 					fontSize:10,
	// 					interval:function(index,value){return !/^YZYPD/.test(value)},
 //       					formatter:function(value){
 //       						//console.log(value);
 //       						if(value.length > 3){
	// 							value = value.substring(0,3) + '...';
	// 						}
	// 						return value;

	// 						//console.log(value);
 //       					}

	// 				},
	// 				"data":dimensionality_show_data[i],
	// 				gridIndex:i
	// 			}
	// 			needYais.push(aY);

	// 			var aGrid = {
	// 				containLabel:false,
	// 				show:false,
	// 			}
	// 			aGrid["left"] = 80 + i * (60 + i);
	// 			// if(maxLength > 0){
	// 			// 	aGrid["left"] = 80 + (maxLength * 5) + i * (maxLength * 5 + 60);
	// 			// }else{
	// 			// 	aGrid["left"] = 100 + i * (60 + i);
	// 			// }

	// 			// aGrid["bottom"] = 60;
	// 			aGrid["bottom"] = 120;


	// 			if(i != dimensionality_show_data.length - 1){
	// 				aGrid["tooltip"] = {show:false}
	// 			}
	// 			if(i > 0){
	// 				var obj = {
	// 			    	show:false,
	// 			        type: "value",
	// 			        gridIndex:dimensionality_show_data.length - 1 - i,
	// 			        min:0,
	// 			        max:valueMax,
	// 				}
	// 				needXais.unshift(obj);

	// 				var aSeriesData = {
	// 					name:"help",
	// 					type:"bar",
	// 					xAxisIndex:i-1,
	// 					yAxisIndex:i-1,
	// 					"data":[{"value":valueMax/valueUnitValue,"originValue":valueMax}],
	// 					itemStyle:{
	// 						normal:{
	// 							opacity:0
	// 						}
	// 					},
	// 					cursor:"default"
	// 				}
	// 				series.push(aSeriesData);
	// 			}

	// 			gridArr.push(aGrid);

	// 		}
	// 		var dataZoomXindexArray = [];
	// 		var dimension_length =  all_dimensionality.length <= 0 ? 1 : all_dimensionality.length;
	// 		for(var k = dimension_length - 1; k >= 0;k--){
	// 			dataZoomXindexArray.push(k);
	// 		}
	// 		var option = {
	// 		    title: [{
	// 		        text: "条形图",
	// 		        show:false
	// 		    },
	// 		    	{
	// 				  	text: "单位: "+valueUnitValue,
	// 				  	bottom:40,
	// 				  	// bottom:0,
	// 				  	show:false,
	// 				  	textStyle:{
	// 				  		fontSize:14,
	// 				  		color:allColorsDict[currentColorGroupName][0]
	// 				  	}
	// 				  }
	// 		    ],
	// 		    tooltip: {
	// 		        trigger: 'item',
	// 		        axisPointer: { // 坐标轴指示器，坐标轴触发有效
	// 		            type: 'shadow' // 默认为直线，可选为：'line' | 'shadow'
	// 		        },
	// 		       backgroundColor:'rgba(255,255,255,0.95)',
	// 		    	   extraCssText: 'box-shadow: 0px 3px 5px 0px rgba(0, 49, 98, 0.2);border:1px solid #eeeeee;border-bottom:0',
	// 		       formatter:function(params){
	// 		        		var needValue = params.value;
	// 							  if(normalUnitValue != -1){
	// 							  	 needValue = needValue.toFixed(normalUnitValue);
	// 							  }
	// 			       	 	var leftDiv = "<div style='float:left;color:#808080;font-size:10px;'>";
	// 								var rightDiv = "<div style='float:left;color:#202020;font-size:10px;padding-left:5px;'>";
	// 								for(var i = 0;i < all_dimensionality.length;i++){
	// 									var aP = "<p style='margin:0;margin-left:12px;padding:0 0 10px 0;height:10px;'>"+all_dimensionality[i]+":</p>";
	// 									leftDiv+=aP;
	// 								}
	// 								leftDiv+="<p style='padding:0 0 10px 0;height:10px;margin:0;'><span style=width:8px;height:8px;border-radius:50%;display:inline-block;margin-top:2px;line-height:8px;background:"+params.color + "></span>"+"<span style='display:inline-block;margin-left:5px;height:10px;line-height:10px;'>"+params.seriesName+":</span></p>";
	// 								for(var k = 0;k < params.data.theDimeInfo.length;k++){
	//                    rightDiv+= "<p style='padding:0 0 10px 0;height:10px;margin:0;'>"+params.data.theDimeInfo[k]+"</p>";
	//                 }
 //                  rightDiv+= "<p style='padding:0 0 10px 0;height:10px;margin:0;'>"+needValue+"</p>";
	// 								var leftTongbi = "<p style='margin:0;margin-left:12px;padding:0 0 10px 0;height:10px;'>同比:</p>";
	// 								 var leftHuanbi = "<p style='margin:0;margin-left:12px;padding:0 0 10px 0;height:10px;'>环比:</p>";
	// 								 var rightTongbi = "<p style='padding:0 0 10px 0;height:10px;margin:0;'>"+(Number(params.data.tongbi)*100).toFixed(2)+"%</p>";
	// 								 var rightHuanbi = "<p style='padding:0 0 10px 0;height:10px;margin:0;'>"+(Number(params.data.huanbi)*100).toFixed(2)+"%</p>";
	// 								 if(showTongbiMeasureArray.indexOf(params.data.measureName) != -1){
	// 									 leftDiv += leftTongbi;
	// 									 rightDiv += rightTongbi;
	// 								 }
	// 								 if(showHuanbiMeasureArray.indexOf(params.data.measureName) != -1){
	// 									 leftDiv += leftHuanbi;
	// 									 rightDiv += rightHuanbi;
	// 								 }
	// 								 leftDiv+= "</div>";
	// 								 rightDiv+= "</div>";
	//                  return leftDiv+rightDiv;
	// 		        },
	// 		        textStyle:{
	// 		        		fontSize:12
	// 		        }
	// 		    },
	// 		    legend: {
	// 		        data: commonLegend,
	// 		        left:"center",
	// 		        // bottom:0,
	// 		        bottom:40,
	// 		        width:"60%",
	// 		    },
	// 		    	color:allColorsDict[currentColorGroupName],
	// 			toolbox: {
	// 		        show: true,
	// 		        feature: {
	// 		            // dataView: {readOnly: true},
	// 		            restore: {},
	// 		            saveAsImage: {
	// 		            	title:"保存为png"
	// 		            }
	// 		        },
	// 		        orient:"vertical",
	// 		        right:20,
	// 		        top:"middle",
	// 		        itemSize:20,
	// 		        itemGap:30
	// 			},
	// 			  dataZoom:[
	// 		    			{
	// 			    		type: 'slider',
	//            			 	show: dimensionality_show_data[dimensionality_show_data.length - 1].length > 15,
	//            			 	filterMode:"filter",
	//            			 	// backgroundColor:"#dedede",
	//            			 	// fillerColor:"#ff7e00",
	//            			 	backgroundColor:"#f5f5f5",
	//            			 	filterColor:"#dedede",
	//            			 	showDataShadow:false,
	// 			            yAxisIndex: dataZoomXindexArray,
	// 			            height:10,
	// 			            borderColor:"#f5f5f5",
	// 			            handleStyle:{
	// 			            		// color:"#ff7e00"
	// 			            		color:"#dedede"
	// 			            },
	// 			            startValue:0,
	// 			            endValue: dimensionality_show_data[dimensionality_show_data.length - 1].length > 15 ? 15:null,
	// 			            orient:"horizontal",
	// 			            // bottom:25,
	// 			            bottom:0,
	// 			            handleSize:12,
	// 		            	maxValueSpan:15,
	// 		           		throttle:100,
	// 		            	handleIcon:"path://M306.1,413c0,2.2-1.8,4-4,4h-59.8c-2.2,0-4-1.8-4-4V200.8c0-2.2,1.8-4,4-4h59.8c2.2,0,4,1.8,4,4V413z",
	// 		    			},
	// 		    			{
	// 		    			type: 'slider',
	//            			 	show: false,
	//            			 	filterMode:"empty",
	// 			            xAxisIndex: dataZoomXindexArray,
	// 		    			}
	// 		    ],
	// 		    grid: gridArr,
	// 		    yAxis: needYais,
	// 		    xAxis:needXais,
	// 		    series:series
	// 		};

	// 			//清除上一个图形的图例
	// 			mycharts.clear();


	// 			//使用刚指定的配置项和数据显示图标
	// 			mycharts.setOption(option);
	// 			spinner.stop();
	// 			$(".maskLayer").hide();
	// 	});
	// }



	<!-- 撤销、下一步 -->
	//当点击do 时 table 添加一行，在点击之前缓存table对象，
	$("#do1").click(function(){
	      var index =  $(this).data("index");
	      index  = index  ? index + 1  : 0; //记录次数
	      $(this).data("index",index);
	      var table = $("#div1").children("talbe");
	      $(this).data("table"+index,table.clone(true) ); //缓存拷贝对象
	      table .append("<tr><td></td></tr>");
	});
	//回退
	$("#undo1").click(function(){
	     var index =  $("#do1").data("index");
	     if (!index) {
	        return; 
	     }
	    $("#div1").empty().append($("#do1").data("table"+index)); //重新加载缓存的对象
	    $("#do1").data("table"+index,"").data("index",index - 1); //把已经回退的对象清空，计数减一，
	});





	function del(index){
		//用于撤销和恢复的信息
		var info = {};
		info["index"] = index;
		info["type"] = 'delete';
		info["data"] = data;
		undo.push(clone(info));
		redo.splice(0,redo.length);
	}

	//撤销
	function prev(){
		if(undo.length == 0){
			return ;
		}
		var last = undo[undo.length-1];   //最近的操作
		var index = undo["index"];
		var type = undo["type"];
		var data;
		if(type == 'delete'){
			insert(parseInt(index),data);
		}
		redo.push(clone(undo));
		undo.splice(undo.length-1,1);
	}

	//恢复
	function next(){
		if(redo.length == 0){
			return ;
		}
		var last = redo[redo.length-1];
		var index = redo["index"];
		var type = redo["type"];
		var data;
		if(type == 'delete'){
			del(parseInt(index));
		}
		undo.push(clone(redo));
		redo.splice(redo.length-1,1);
	}


视图库条形图分组:

opp.yAxis[z].axisTick.interval = function(index,value){
if(index % 2 == 0 && len > 10) {
	nameArr.push(value);
	// console.log(nameArr);
	for(var n=0;n<nameArr.length;n++){
		if(nameArr[n] == nameArr[n+1]){
			nameArr[n+1] = '';
		}
		if(nameArr[n] == ''){
			if(nameArr[n-1] == nameArr[n+1]){
				nameArr[n+1] = '';
			}
		}
	}
	// console.log(nameArr);
	for(var l=0;l<nameArr.length;l++){
		value = nameArr[l];
	}
	return value;
	// return !/^YZYPD/.test(value)
}else if(len < 10){
	return value;
}else{
	return '';
}};
